#this code plots a Molniya orbit and its variations in classical orbital elements under J2 perturbation using Cowell's method

#import packages 
import numpy as np
import math
from scipy.integrate import solve_ivp, odeint
import matplotlib.pyplot as plt


#given conditions
mu = 398600 #Earth gravitational parameter in km^3/s^2
a = 26600 #semi major axis in km
e = 0.74 #eccentricity
i = 1.10654 #inclination
om = math.pi*45/180 #RAAN in radians
w = math.pi*5/180 # Argument of Periapse (AOP) in radians
M = math.pi*10/180 #Mean anomaly in radians
J2 = 0.00108263 #zonal harmonic parameter for l = 2
R = 6370 #Earth radius

#custom functions to get initial orbit State from initial orbital Elements
#Mean anomaly to Eccentric anomaly
def M_to_Eccen(M, e, tol = 1e-13, n=10): 
    i = 0
    delta = 1
    Ei = (M + e/2) if M < math.pi else (M - e/2)
    while abs(delta)>tol and i<=n:
        delta = (Ei - e*math.sin(Ei) - M)/(1-e*math.cos(Ei))
        Ei = Ei - delta
        i+=1
    return Ei   

#Eccentric anomaly to true anomaly
def Eccen_to_f(E, e): 
    return 2*math.atan((np.sqrt((1+e)/(1-e)))*math.tan(E/2))

#Semimajor axis to angular momentum
def a_to_h(a, e):
    return np.sqrt(mu*a*(1-e**2))

#Semimajor axis to position vector magnitude
def r_scal_using_a(a, e, f):
    return a*(1-e**2)/(1+e*math.cos(f))

#Angular momentum to position vector magnitude
def r_scal_using_h(h, e, f):
    return (h**2/mu)*(1/(1+e*math.cos(f)))

#Position vector in perifocal coordinates
def r_vec_peri(r_scal, f):
    return r_scal*np.array([math.cos(f), math.sin(f), 0])

#Velocity vector in perifocal coordinates
def v_vec_peri(h, e, f):
    return (mu/h)*np.array([-math.sin(f), e+math.cos(f), 0])

#Euler rotation about Z-axis over AOP
def R3_w(w):
    return np.array([[math.cos(w), math.sin(w), 0],[-math.sin(w), math.cos(w), 0],[0,0,1]])

#Euler rotation about X-axis over Inclination
def R1_i(i):
    return np.array([[1,0,0],[0, math.cos(i), math.sin(i)],[0, -math.sin(i), math.cos(i)]])

#Euler rotation about Z-axis over RAAN
def R3_om(om):
    return np.array([[math.cos(om), math.sin(om), 0],[-math.sin(om), math.cos(om), 0],[0,0,1]])

#Direction of cosines to transform vector from geocentric to perifocal coordinates
def geo_to_peri_cosmatrix(R3w, R1i, R3om):
    n = np.matmul(R3w, R1i)
    return np.matmul(n, R3om)


#integration function to propagate orbit using Cowell's method
def func_PertBP(t, state):
    rx = state[0]
    ry = state[1]
    rz = state[2]
    vx = state[3]
    vy = state[4]
    vz = state[5]
    
    r = np.sqrt(rx**2 + ry**2 + rz**2)
    
    px = (1.5*J2*mu*R**2/r**4)*((rx/r)*(5*(rz/r)**2-1))
    py = (1.5*J2*mu*R**2/r**4)*((ry/r)*(5*(rz/r)**2-1))
    pz = (1.5*J2*mu*R**2/r**4)*((rz/r)*(5*(rz/r)**2-3))
    
    deriv_state = np.zeros(6)
    
    deriv_state[0] = vx
    deriv_state[1] = vy
    deriv_state[2] = vz
    deriv_state[3] = (-mu/r**3)*rx + px
    deriv_state[4] = (-mu/r**3)*ry + py
    deriv_state[5] = (-mu/r**3)*rz + pz
                                
    return deriv_state

#Propagate Molniya orbit over 100 days

E = M_to_Eccen(M, e, tol = 1e-13, n=10)
f = Eccen_to_f(E, e)
h = a_to_h(a, e)
r_scal = r_scal_using_h(h, e, f)
r_vec_peri = r_vec_peri(r_scal, f)
v_vec_peri = v_vec_peri(h, e, f)
R3w= R3_w(w)
R1i = R1_i(i)
R3om = R3_om(om)
cosmat_geo_to_peri = geo_to_peri_cosmatrix(R3w, R1i, R3om)
cosmat_peri_to_geo = cosmat_geo_to_peri.transpose()
r_geo = np.matmul(cosmat_peri_to_geo, r_vec_peri)
print("initial position vector is ", r_geo)
v_geo = np.matmul(cosmat_peri_to_geo, v_vec_peri)
print("initial velocity vector is ", v_geo)
r = np.sqrt(sum (n**2 for n in r_geo))
print("position vector magnitude is" , r)

state_0 = np.concatenate((r_geo, v_geo), axis = None) #initial orbital state

day = 24*3600
T = 100*day #in seconds
tol = 1e-10
stamps = math.floor(T/3600) #integration steps to the nearest hour
t = np.linspace(0, T, stamps)

int_sol = odeint(func = func_PertBP, t = t, tfirst = True, y0 = state_0, rtol = tol, atol = tol*100)

states_orbit = int_sol #should be a 2D array with 6 coloumns

rxs = states_orbit[:,0]
rys = states_orbit[:,1]
rzs = states_orbit[:,2]
vxs = states_orbit[:,3]
vys = states_orbit[:,4]
vzs = states_orbit[:,5]

#plot propagated orbit using a color map to show shift in orbit
cmap = ['blue', 'green', 'yellow', 'orange', 'red']
fig1, axs1 = plt.subplots(figsize = (15,15))
axs1 = plt.axes(projection = '3d')
c=0
for i in range(0,stamps,480):
    axs1.plot(rxs[i:i+481], rys[i:i+481], rzs[i:i+481], color = cmap[c])
    c=c+1
axs1.view_init(40,40)
axs1.set_xlabel('X/km')
axs1.set_ylabel('Y/km')
axs1.set_zlabel('Z/km')
axs1.set_title('J2 Perturbed Molniya Orbit (shift from blue to red)')
#axs1.scatter(0,0,0, color = 'black', marker = 'o', s = 20000)
V = np.array([[1e4,0,0], [0,1e4,0], [0,0,1e4]])
origin = np.array([[0, 0, 0],[0, 0, 0], [0, 0, 0]]) # origin point
plt.quiver(*origin, V[:,0], V[:,1], V[:,2], color = 'black', lw = 5)
plt.show()

#custom functions to convert orbit states into orbital elements

#Semimajor axis from r and v
def func_a(r_scal, v_scal):
    return 1/(2/r_scal - v_scal**2/mu)

#Eccentricity vector from r and v
def func_e_vec(r_scal, v_scal):
    R = (v_scal**2)/mu - 1/r_scal
    V = (1/mu)*np.dot(r_vec, v_vec)
    return R*r_vec - V*v_vec

#Angular momentum vector from r and v
def func_h_vec(r_vec, v_vec):
    return np.cross(r_vec, v_vec)

#Nodal vector from angular momentum
def func_n_vec(h_vec):
    return np.cross(np.array([0,0,1]) , h_vec)

#Inclination from angular momentum
def func_angle_i(h_vec):
    #hz_vec = np.dot(h_vec, np.array([0,0,1]))
    #hz_scal = np.sqrt(sum(n**2 for n in hz_vec))
    h_scal = np.sqrt(sum(n**2 for n in h_vec))
    return (math.acos(h_vec[2]/h_scal))

#RAAN from nodal vector
def func_long_om(n_vec):
    #ny_vec = np.dot(n_vec, np.array([0,1,0]))
    #ny = np.sqrt(sum(n**2 for n in ny_vec))
    if n_vec[1]>=0:
        return (math.acos(n_vec[0]/np.sqrt(sum(n**2 for n in n_vec))))
    else:
        return (2*math.pi - math.acos(n_vec[0]/np.sqrt(sum(n**2 for n in n_vec))))

#AOP from nodal vector and eccentricity vector
def func_attid_om (n_vec, e_vec):
    n_scal = np.sqrt(sum(n**2 for n in n_vec))
    if e_vec[2]>=0:
        return (math.acos(np.dot(n_vec, e_vec) / (n_scal*e)))
    else:
        return (2*math.pi - math.acos(np.dot(n_vec, e_vec) / (n_scal*e)))

#True anomaly from eccentricity vector, r and v
def func_true_f(e_vec, r_vec, v_vec):
    v_rad = np.dot(r_vec, v_vec)/r_scal
    if v_rad >= 0:
        return (math.acos(np.dot(e_vec, r_vec)/(e*r_scal)))
    else:
        return (2*math.pi - math.acos(np.dot(e_vec, r_vec)/(e*r_scal)))

#create array of orbital elements from orbital states at each integration step
orbit_elements_pert = [] #a, e, i, om, w, f
for i in range(stamps):
    r_vec = states_orbit[i,0:3]
    v_vec = states_orbit[i,3:6]
    r_scal = np.sqrt(sum(n**2 for n in r_vec))
    v_scal = np.sqrt(sum(n**2 for n in v_vec))
    a = func_a(r_scal, v_scal)
    e_vec = func_e_vec(r_scal, v_scal)
    e = np.sqrt(sum(n**2 for n in e_vec))
    h_vec = func_h_vec(r_vec, v_vec)
    h = np.sqrt(sum(n**2 for n in h_vec))
    n_vec = func_n_vec(h_vec)
    n = np.sqrt(sum(m**2 for m in n_vec))
    i = func_angle_i(h_vec)
    om = func_long_om(n_vec)
    w = func_attid_om(n_vec, e_vec)
    f = func_true_f(e_vec, r_vec, v_vec)
    orbit_elements_pert.append([a,e,i,om,w,f])

orbit_elements_pert_arr = np.array(orbit_elements_pert)


#plot variations in orbital elements

#Variations in Semimajor Axis
fig2,ax = plt.subplots(figsize = (10,4))
ax.plot(t/3600, orbit_elements_pert_arr[:,0]-26600, 'black')
ax.set_xlabel('time/hours')
ax.set_ylabel('delta a/km')
ax.set_title('Plot of Semimajor Axis Variation of J2 Perturbed Orbit')
plt.show()

#Variations in eccentricity
fig3,ax = plt.subplots(figsize = (10,4))
ax.plot(t/3600, orbit_elements_pert_arr[:,1]-0.74, 'green')
ax.set_xlabel('time/hours')
ax.set_ylabel('delta e')
ax.set_title('Plot of Eccentricity Variations of J2 Perturbed Orbit')
plt.show()

#Variations in Inclination
fig4,ax = plt.subplots(figsize = (10,4))
ax.plot(t/3600, (orbit_elements_pert_arr[:,2] - 1.10654)*180/math.pi, 'blue')
ax.set_xlabel('time/hours')
ax.set_ylabel('delta i/deg')
ax.set_title('Plot of Inclination Variations of J2 Perturbed Orbit')
plt.show()

#Variations in RAAN
fig5,ax = plt.subplots(figsize = (10,4))
ax.plot(t/3600, (orbit_elements_pert_arr[:,3] - math.pi*45/180)*180/math.pi, 'orange')
ax.set_xlabel('time/hours')
ax.set_ylabel('delta Om/deg')
ax.set_title('Plot of Right Ascension Variations of J2 Perturbed Orbit')
plt.show()

#Variations in AOP
fig6,ax = plt.subplots(figsize = (10,4))
ax.plot(t/3600, (orbit_elements_pert_arr[:,4] - math.pi*5/180)*180/math.pi, 'purple')
ax.set_xlabel('time/hours')
ax.set_ylabel('delta w/deg')
ax.set_title('Plot of Periapse Argument Variations of J2 Perturbed Orbit')
plt.show()
